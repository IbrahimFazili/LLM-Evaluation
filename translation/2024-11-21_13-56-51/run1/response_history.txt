{'Task': [{'role': 'system', 'content': "\nYou are a coding assistant skilled in translating Java code into Python. Your main task is to take Java code as input and output Python code, ensuring class names remain the same. Please output only Python code, without '``` python' or '```' delimiters.\n\nGuidelines for handling imports and dependencies:\n1. All files will be in the same directory, so imports should be simple and direct without any package structure or relative import notation.\n2. If one class (e.g., `TaskManager`) references another (e.g., `Task`), ensure the translated Python version of `TaskManager` includes a direct import, such as `import Task`.\n3. Only include imports for classes that are actually referenced in the current file, and avoid using any relative imports (e.g., `from .task import Task`) or package-like imports (e.g., `from org.cornell import Task, from Task import Task`).\n\nFor translating test files:\n1. Convert Java test annotations (e.g., `@Test`) into methods in a Python `unittest.TestCase` subclass.\n2. Translate Java assertions like `assertEquals`, `assertTrue`, `assertFalse`, etc., to Python’s `unittest` methods (e.g., `assertEqual`, `assertTrue`).\n3. Ensure that `import unittest` is included at the top of the test file to support testing functionality.\n4. If required, you can import other Python modules as needed. If a class under test needs to be accessed as module-level variables, you can import it as a module.\n"}, {'role': 'user', 'content': 'package cornell;\n\nimport java.time.LocalDate;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class Task {\n\n    private int id;\n    private String owner;\n    private String title;\n    private String description;\n    private LocalDate startDate;\n    private LocalDate endDate;\n    private LocalDate completionDate;\n    private boolean completed;\n\n    public Task(int id, String owner, String name, String description, LocalDate startDate, LocalDate endDate) {\n        this.id = id;\n        this.owner = owner;\n        this.title = name;\n        this.description = description;\n        this.startDate = startDate;\n        this.endDate = endDate;\n        this.completionDate = null;\n        this.completed = false;\n    }\n\n    public void markAsCompleted() {\n        this.completed = true;\n    }\n}'}, {'role': 'assistant', 'content': 'import datetime\n\nclass Task:\n\n    def __init__(self, id, owner, name, description, startDate, endDate):\n        self.id = id\n        self.owner = owner\n        self.title = name\n        self.description = description\n        self.startDate = startDate\n        self.endDate = endDate\n        self.completionDate = None\n        self.completed = False\n\n    def markAsCompleted(self):\n        self.completed = True'}], 'TaskManager': [{'role': 'system', 'content': "\nYou are a coding assistant skilled in translating Java code into Python. Your main task is to take Java code as input and output Python code, ensuring class names remain the same. Please output only Python code, without '``` python' or '```' delimiters.\n\nGuidelines for handling imports and dependencies:\n1. All files will be in the same directory, so imports should be simple and direct without any package structure or relative import notation.\n2. If one class (e.g., `TaskManager`) references another (e.g., `Task`), ensure the translated Python version of `TaskManager` includes a direct import, such as `import Task`.\n3. Only include imports for classes that are actually referenced in the current file, and avoid using any relative imports (e.g., `from .task import Task`) or package-like imports (e.g., `from org.cornell import Task, from Task import Task`).\n\nFor translating test files:\n1. Convert Java test annotations (e.g., `@Test`) into methods in a Python `unittest.TestCase` subclass.\n2. Translate Java assertions like `assertEquals`, `assertTrue`, `assertFalse`, etc., to Python’s `unittest` methods (e.g., `assertEqual`, `assertTrue`).\n3. Ensure that `import unittest` is included at the top of the test file to support testing functionality.\n4. If required, you can import other Python modules as needed. If a class under test needs to be accessed as module-level variables, you can import it as a module.\n"}, {'role': 'user', 'content': 'package cornell;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TaskManager {\n    private final List<Task> tasks = new ArrayList<>();\n\n    public void addTask(Task task) {\n        tasks.add(task);\n    }\n\n    public void removeTask(Task task) {\n        tasks.remove(task);\n    }\n\n    public void markTaskAsCompleted(Task task) {\n        if (tasks.contains(task)) {\n            task.markAsCompleted();\n        }\n    }\n\n    public List<Task> getAllTasks() {\n        return new ArrayList<>(tasks);\n    }\n\n    public List<Task> getPendingTasks() {\n        List<Task> pendingTasks = new ArrayList<>();\n        for (Task task : tasks) {\n            if (!task.isCompleted()) {\n                pendingTasks.add(task);\n            }\n        }\n        return pendingTasks;\n    }\n\n    public List<Task> getCompletedTasks() {\n        List<Task> completedTasks = new ArrayList<>();\n        for (Task task : tasks) {\n            if (task.isCompleted()) {\n                completedTasks.add(task);\n            }\n        }\n        return completedTasks;\n    }\n\n    public void shiftTaskAround(Task task, int position) {\n        if (position >= tasks.size() || !tasks.contains(task)){\n            return;\n        }\n        tasks.remove(task);\n        tasks.add(position, task);\n    }\n\n    public List<Task> getTasksOwnedBy(String owner) {\n        List<Task> rlTask = new ArrayList<>();\n        for (Task t: tasks) {\n            if (t.getOwner().equals(owner)) {\n                rlTask.add(t);\n            }\n        }\n        return rlTask;\n    }\n\n    public void changeOwner(String owner, Task task) {\n        if (tasks.contains(task)) {\n            int i = tasks.indexOf(task);\n            tasks.get(i).setOwner(owner);\n        }\n    }\n}'}, {'role': 'assistant', 'content': 'import Task\n\nclass TaskManager:\n    def __init__(self):\n        self.tasks = []\n\n    def add_task(self, task):\n        self.tasks.append(task)\n\n    def remove_task(self, task):\n        self.tasks.remove(task)\n\n    def mark_task_as_completed(self, task):\n        if task in self.tasks:\n            task.mark_as_completed()\n\n    def get_all_tasks(self):\n        return list(self.tasks)\n\n    def get_pending_tasks(self):\n        pending_tasks = []\n        for task in self.tasks:\n            if not task.is_completed():\n                pending_tasks.append(task)\n        return pending_tasks\n\n    def get_completed_tasks(self):\n        completed_tasks = []\n        for task in self.tasks:\n            if task.is_completed():\n                completed_tasks.append(task)\n        return completed_tasks\n\n    def shift_task_around(self, task, position):\n        if position >= len(self.tasks) or task not in self.tasks:\n            return\n        self.tasks.remove(task)\n        self.tasks.insert(position, task)\n\n    def get_tasks_owned_by(self, owner):\n        rl_task = []\n        for t in self.tasks:\n            if t.get_owner() == owner:\n                rl_task.append(t)\n        return rl_task\n\n    def change_owner(self, owner, task):\n        if task in self.tasks:\n            i = self.tasks.index(task)\n            self.tasks[i].set_owner(owner)'}]}
